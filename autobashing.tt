#nop Functionaility for autonomous bashing;

#var ReverseDir {
   {n} {s}
   {e} {w}
   {s} {n}
   {w} {e}

   {ne} {sw}
   {nw} {se}
   {se} {nw}
   {sw} {ne}

   {up} {down}
   {down} {up}

   {in} {out}
   {out} {in}
}

#var RecordedPath { };
#var ReturnPath { };
#var RetreatHealth 0.70;
#var ContinueHeatlh 0.90;

/** 
   Raised after successfully moving to a new location
   Teleporting clears the stack
*/
deregisterEvent recordPath;
registerEvent recordPath;
#alias {recordPath} {
   #nop AttemptedDir comes from MoveCommands.tt and mapping.tt;
   #if {"$AutoBashStrat" !== "Retreating" && &{AttemptedDir}} {
      #local dir $ReverseDir[$AttemptedDir];
      #list RecordedPath ins +1 $dir;
      #if {$RecordedPath > 20} {
         #list RecordedPath delete -1;
      };
   };
};

/**
   Clear the stack from teleporting
*/
deregisterEvent clearPath;
registerEvent clearPath;
#alias {clearPath} {
   #list RecordedPath clear;
};

#var AutoBashStrat {
   Hunting;
}

#alias {autobash.hunt} {
   #nop If health is too low, get out of there.;
   #local hp @getHpPercent{};
   #if {$hp < $RetreatHealth} {
      autobash.switchToRetreat;
      #return;
   };

   atk;

   #if {&{atkTarget} == 0 } {
      autobash.targetsCleared;
      #return;
   };
}

#alias {autobash.targetsCleared} {
   #if {$hp > $ContinueHeatlh} {
      #if {"$AutoBashStrat" === "Return"} {
         autobash.return;
         #return;
      };

      #else {
         registerEvent finishAutoHarvest continueFromHarvest;
         autoharvest;
         #return;
      };
   };

   #else {
      autobash.switchToheal;
      #return;
   };
}

#alias autobash.switchToheal {
   print Switching to Heal;

   #class autobash clear; 
   deregisterEvent EnteredRoom autobash.hunt;
   #var AutoBashStrat {Healing};
   registerEvent AutoHeal autobash.heal;
   #class autobashHeal load;
}

#alias autobash.heal {
   #nop CURING SIPHEALTH to set the percentage;
   #local hp @getHpPercent{};
   dbg Healing, HP is at $hp;
   #if {$hp > $ContinueHeatlh} {
      info Health is in a good state, move on. Stop healing and switch to Hunting;
      deregisterEvent AutoHeal;
      #class autobashHeal clear;

      #class autobash load; 
      #var AutoBashStrat {Hunting};
      registerEvent EnteredRoom autobash.hunt;
      autobash.hunt;
   };
}

#alias autobash.switchToRetreat {

   dbg Clearing ReturnPath;
   #var ReturnPath { };
   #class autobash clear; 
   deregisterEvent EnteredRoom;

   print Switching to Retreat;
   #send {CLEARQUEUE ALL};

   #var AutoBashStrat {Retreating};
   registerEvent AutoHeal autobash.retreat;
   #class autobashHeal load;
   #class autobashMoving load;

   autobash.retreat;
   registerEvent EnteredRoom allowRetreat;
}

/** When this is called, it is because the retreat move was succesful **/
#var AllowRetreat 1;
#alias allowRetreat {
   #local next $RecordedPath[+1];
   #list RecordedPath delete +1;
   #local dir $ReverseDir[$next];
   dbg Adding $dir to Returnpath;
   #list ReturnPath ins +1 $dir;
   #var AllowRetreat 1;
};

#alias autobash.retreat {
   #if {&{roomMobs[]} > 0 && $AllowRetreat == 1} {
      #var AllowRetreat 0;
      #local next $RecordedPath[+1];
      print Retreating!;
      move $next; 
      #return;
   };

   #local hp @getHpPercent{};
   #if {$hp > $ContinueHeatlh} {
      deregisterEvent AutoHeal autobash.retreat;
      deregisterEvent EnteredRoom;

      #class autobash load; 
      #var AutoBashStrat {Return};
      registerEvent EnteredRoom autobash.hunt;
      registerEvent EnteredRoom allowReturn;
      #class autobashHeal clear;
      #class autobashMoving clear;

      autobash.return;
   };
}

#var AllowReturn 1;
#alias allowReturn {
   #var AllowReturn 1;

   #if {&{ReturnPath[]} > 0} {
      #list ReturnPath delete +1;
      dbg Removed item from ReturnPath, count is &{ReturnPath[]};

      #if {&{ReturnPath[]} == 0} {
         print Returned to the room we started retreating;
         deregisterEvent EnteredRoom;
         #var AutoBashStrat {Hunting};
      }
   };
};

#alias {autobash.return} {
   #if {&{roomMobs[]} == 0 && $AllowReturn == 1} {
      print Going back to the fight!;
      #var AllowReturn 0;

      #nop Back out to previous room;
      #nop In lower level places, this is enough;
      #nop But in higher level areas the mobs will follow and we need to run more.;

      #var ReturnPath;
      #local next $ReturnPath[+1];
      dbg Headed in $next;
      move $next; 
      dbg did it move?;
      #return;
   };
}

#function {getHpPercent} {
   #var hp $gmcp[char][vitals][hp];
   #math hp {$hp * 1.0};
   #var maxhp $gmcp[char][vitals][maxhp];
   #math maxhp {$maxhp * 1.0};
   #math hpPercent {$hp/$maxhp};
   #return $hpPercent;
}

#class autobashHeal kill;
#class autobashHeal open;
#action {You may drink another health or mana elixir.} {
   info Healing should be called...;
   #nop raiseEvent heal;
}

/** 15:05:31.44 O 91h 27rage 85m 100e 98w[exE|93] :>- **/
/**
#nop #action {%d:%d:%d.%d %w %dh %drage} { #line ignore #show Health is at %6!; };
**/

#class autobashHeal close;
#class autobashHeal save;

#alias {satk} {
   #unvar atkTarget;
   #class autobash clear; 

   deregisterEvent AutoHeal;
   deregisterEvent EnteredRoom;
   deregisterEvent finishAutoHarvest;
}

/** 
   Just do auto attacking. 
   This assumes that all healing, retreating, or defs are done manually.
**/
#alias {aatk} {
   #class autobash load; 
   print {Auto Attacking};
   #if {$distortActive === 0} {da};

   deregisterEvent AutoHeal;
   atk;
}

#class autobash kill;
#class autobash open;

#action {You have recovered} {
   #var AutoBashStrat {Hunting};
   autobash.hunt;
}

/** Both of your legs must be free and unhindered to do that **/
#action {Both of your} {
   #line oneshot #action {You have cured the broken} {
      autobash.hunt;
   }
}

#class autobash close;
#class autobash save;

#class autobashMoving kill;
#class autobashMoving open;

/** You are paralysed and cannot do that. **/
#action {You have cured the paralysis affliction.} {
   #var AllowRetreat 1;
   autobash.retreat;
}

#action {You slowly hobble} {
   dbg Hobbling, should attempt another retreat after entering room;
   #nop autobash.retreat;
}

#action {You must regain balance first.} {
   #var AllowRetreat 1;
   autobash.retreat;
}

#class autobashMoving close;
#class autobashMoving save;

/** Aliases to move to new location and start autobashing **/
#alias {autobash.reachedLocation} {
   deregisterEvent reachedDestination;
   mbash;
}

#alias {autobash.rhod} {
   registerEvent reachedDestination autobash.reachedLocation;
   mwalk rhod;
}

#alias {autobash.aalen} {
   registerEvent reachedDestination autobash.reachedLocation;
   mwalk aalen;
}


